///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// README /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*

*/


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// header guard
#ifndef CCAMD_VT100_LIB_H
#define CCAMD_VT100_LIB_H

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DEFINES, MACROS, etc. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// used to compute the min and max of two expressions
#define MIN(a, b)  (((a) < (b)) ? (a) : (b))
#define MAX(a, b)  (((a) > (b)) ? (a) : (b))
#define SIGN(a) ( ((a) > 0) ? (1) : (-1) )
#define CLAMP(x,l,u) { if ( (x) > (u) ) x = (u); else if ( (x) < (l) ) x = (l); }

// a more useful random function
#define RAND_RANGE(x,y) ( (x) + (rand()%((y)-(x)+1)))

// used for swapping algorithm
#define SWAP(a,b,t) {t=a; a=b; b=t;}

// binary macro
#define BINARY8( b7, b6, b5, b4, b3, b2, b1, b0 ) ( (b7 << 7) | (b6 << 6) | (b5 << 5) | (b4 << 4) | (b3 << 3) | (b2 << 2) | (b1 << 1) | (b0 << 0) )
#define SETBIT( shift ) ( 1 << shift )

// Extended ASCII art printing characters
#define ASCII_BLOCK_DITHERED_LIGHT  176
#define ASCII_BLOCK_DITHERED_MEDIUM 177
#define ASCII_BLOCK_DITHERED_DARK   178
#define ASCII_BLOCK_SOLID           219

// ASCII codes for ease of parser development
#define ASCII_A       65
#define ASCII_F       ('F')
#define ASCII_Z       90

#define ASCII_a       97
#define ASCII_z       122

#define ASCII_0       48
#define ASCII_9       57

#define ASCII_BS      127  // backspace   
#define ASCII_LF      0x0A // line feed 
#define ASCII_CR      0x0D // carriage return
#define ASCII_ESC     0x1B // escape
#define ASCII_HEX     0x24 // $ for hex
#define ASCII_BIN     0x25 // % for binary
#define ASCII_LB      0x5B // [ 
#define ASCII_SEMI    0x3A // ; 
#define ASCII_EQUALS  0x3D // = 
#define ASCII_PERIOD  0x2E // .
#define ASCII_COMMA   0x2C // ,
#define ASCII_SHARP   0x23 // #
#define ASCII_NULL    0x00 // null character
#define ASCII_SPACE   0x20 // space

// subset of VT100 terminal attributes/codes
#define VT100_ATTR_OFF    0
#define VT100_BOLD        1
#define VT100_USCORE      4
#define VT100_BLINK       5
#define VT100_REVERSE   7
#define VT100_BOLD_OFF    21
#define VT100_USCORE_OFF  24
#define VT100_BLINK_OFF   25
#define VT100_REVERSE_OFF 27
#define VT100_ESCAPE_CODE 27

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TYPES //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROTOTYPES /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void VT100_PrintArtASCII( char *string );
void VT100_DrawBlockLineAtCursor( char blockChar, int lineLength, int lineFill );
void VT100_Logo( void );
void VT100_SendCmd( char *cmdString );
void VT100_Init( void );
void VT100_ClearScreen( void );
void VT100_SetCursor( unsigned char line, unsigned char column );
void VT100_SetAttr( unsigned char attr );
void VT100_Boot();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBALS ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// VT100 terminal globals
extern const char VT100_ESCAPE_SEQ_STRING[ ];
extern char vtStringBuffer[ ];              // Buffer for building strings...

// Useful commands
extern const char VT100_HIDE_CURSOR[];
extern const char VT100_SHOW_CURSOR[];

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTIONS/METHODS///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HACKING CODE ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif
// end header guard
